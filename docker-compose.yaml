version: '3'
services:

  # ------- films ------- #
  film_service:
    build: ./service_film_/.
    depends_on:
      - film_db
      - film_cache
    env_file:
      - film.env
      - jwt.env

  film_db:
    environment:
      discovery.type: single-node
      xpack.security.enabled: 'false'

  film_cache:
    command: redis-server --include /usr/local/etc/redis/redis.conf
    volumes:
      - ./service_film_/redis/redis.conf:/usr/local/etc/redis/redis.conf

  load_data_es:
    build:
      context: ./service_film_/elastic/
      dockerfile: ./elastic.Dockerfile
    env_file:
      - film.env
    depends_on:
      - film_db

  # faker:
  #   build:
  #     context: .
  #     dockerfile: ./faker/faker.Dockerfile
  #   env_file:
  #     - ./admin.env
  #   depends_on:
  #     - elasticsearch


  # ------- auth ------ #
  auth_service:
    build: ./service_auth/.
    container_name: auth_service
    depends_on:
      - auth_db
      - auth_cache
    env_file:
      - auth.env
      - jwt.env
      - providers.env
    restart: unless-stopped

  auth_db:
    container_name: auth_db
    env_file:
      - auth.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${AUTH_POSTGRES_USER} -d ${AUTH_POSTGRES_DB}'"
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}

  auth_cache:
    container_name: auth_cache
    command: redis-server --include /usr/local/etc/redis/redis.conf
    volumes:
      - ./service_auth/redis/redis.conf:/usr/local/etc/redis/redis.conf

  auth_jaeger:
    container_name: auth_jaeger
    depends_on:
      - auth_service

  # ------- admin panel ------ #
  admin_service:
    container_name: admin_service
    build:
      context: .
      dockerfile: ./service_admin/django.Dockerfile
    command: sh -c "python3 manage.py migrate --noinput && python3 manage.py collectstatic --no-input --clear && gunicorn config.wsgi:application --bind ${ADMIN_APP_HOST}:${ADMIN_APP_PORT}"
    volumes:
      - static_volume:/app/static
    depends_on:
      - admin_db

  admin_db:
    container_name: admin_db
    env_file:
      - admin.env
    volumes:
      - ./service_admin/db_create.sql:/docker-entrypoint-initdb.d/db_create.sql
    environment:
      - POSTGRES_DB=${FILM_POSTGRES_DB}
      - POSTGRES_USER=${FILM_POSTGRES_USER}
      - POSTGRES_PASSWORD=${FILM_POSTGRES_PASSWORD}

  # ------- UGC service ------ #
  ugc_service:
    build:
      context: ./service_ugc/.
      dockerfile: ./ugc.Dockerfile
    container_name: ugc_service
    env_file:
      - ugc.env
    ports:
      - "8001:8000"
    restart: unless-stopped

  # common services
  nginx:
    image: nginx:1.23.3
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:z
      - ./nginx/configs:/etc/nginx/conf.d:z
      - static_volume:/app/static
    depends_on:
      - auth_service
      - film_service
      - admin_service
    ports:
      - "80:80"

volumes:
  static_volume:
